#pragma version >=0.2.0;

#include "../imports/stdlib.fc";
#include "../imports/merkleTreeNFT.fc";
#include "../jetton/imports/op-codes-nft.fc";
#include "../jetton/imports/params.fc";
#include "../jetton/imports/constants.fc";
#include "../jetton/imports/jetton-utils.fc";

;; TONNEL ZK NFT
int op::transfer_notification() asm "0x7362d09c PUSHINT";

const BURN_ADDRESS = "EQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAM9c"a;
const const::tx_fee_send_jetton = 40000000; ;; 0.04 TON
const ONE_TON = 1000000000;

() mint_tonnel(slice recepient, int amount, slice JETTON_MASTER_ADDRESS) impure inline {

    var msg = begin_cell()
    .store_uint(0x18, 6) ;; nobounce - int_msg_info$0 ihr_disabled:Bool bounce:Bool bounced:Bool src:MsgAddress -> 011000
    .store_slice(JETTON_MASTER_ADDRESS)
    .store_coins(const::tx_fee_send_jetton)
    .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
    .store_uint(21, 32)
    .store_uint(0, 64)
    .store_slice(recepient)
    .store_coins(20000000)
    .store_ref(
        begin_cell().store_uint(0x178d4519, 32)
        .store_uint(0, 64)
        .store_coins(amount)
        .store_slice(JETTON_MASTER_ADDRESS)
        .store_uint(0, 200)
        .store_uint(0, 67)
        .store_coins(0)
        .store_uint(0, 1)
        .end_cell()
    );

    send_raw_message(msg.end_cell(), 1); ;; paying fees, revert on errors

}

() send_jetton(slice recepient, int amount, slice JETTON_MASTER_ADDRESS, cell JETTON_BYTE_CODE) impure inline {
    if (amount == 0) {
        return ();
    }
    slice jetton_wallet = calculate_user_jetton_wallet_address(my_address(), JETTON_MASTER_ADDRESS, JETTON_BYTE_CODE);

    var msg = begin_cell()
    .store_uint(0x18, 6) ;; nobounce - int_msg_info$0 ihr_disabled:Bool bounce:Bool bounced:Bool src:MsgAddress -> 011000
    .store_slice(jetton_wallet)
    .store_coins(const::tx_fee_send_jetton)
    .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
    .store_uint(0xf8a7ea5, 32)
    .store_uint(0, 64)
    .store_coins(amount)
    .store_slice(recepient)
    .store_uint(0, 2)
    .store_uint(0, 1)
    .store_coins(0)
    .store_uint(0, 1);
    send_raw_message(msg.end_cell(), 1); ;; paying fees, revert on errors

}

() send_ton(slice recepient, int amount, int mode) impure inline {

    var msg = begin_cell()
    .store_uint(0x10, 6)
    .store_slice(recepient)
    .store_grams(amount)
    .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
    .end_cell();
    send_raw_message(msg, mode);

}


() emit_log_simple(int event_id, slice data) impure inline {
    var msg = begin_cell()
    .store_uint (12, 4) ;; ext_out_msg_info$11 src:MsgAddressInt ()
    .store_uint (1, 2)
    .store_uint (256, 9)
    .store_uint(event_id, 256)
    .store_uint(0, 64 + 32 + 2) ;; created_lt, created_at, init:Maybe, body:Either
    .store_slice(data)
    .end_cell();
    send_raw_message(msg, 0);
}


() transfer_nft_item(slice nft_address, slice new_owner) impure inline {

    var msg = begin_cell()
    .store_uint(0x18, 6) ;; nobounce - int_msg_info$0 ihr_disabled:Bool bounce:Bool bounced:Bool src:MsgAddress -> 011000
    .store_slice(nft_address)
    .store_coins(const::tx_fee_send_nft)
    .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
    .store_uint(op::transfer(), 32)
    .store_uint(0, 64)
    .store_slice(new_owner)
    .store_uint(0, 2)
    .store_uint(0, 1)
    .store_coins(0)
    .store_uint(0, 1);
    send_raw_message(msg.end_cell(), 1); ;; paying fees, revert on errors

}


(int, int) encode_number_to_text(int number) {
    int len = 0;
    int value = 0;
    int mult = 1;
    do {
        (number, int res) = number.divmod(10);
        value = value + (res + 48) * mult;
        mult = mult * 256;
        len = len + 1;
    } until (number == 0);
    return (len, value);
}

cell calculate_nft_item_state_init(int item_index, cell nft_item_code) {
    cell data = begin_cell().store_uint(item_index, 64).store_slice(my_address()).end_cell();
    return begin_cell().store_uint(0, 2).store_dict(nft_item_code).store_dict(data).store_uint(0, 1).end_cell();
}

slice calculate_nft_item_address(int wc, cell state_init) {
    return begin_cell().store_uint(4, 3)
    .store_int(wc, 8)
    .store_uint(cell_hash(state_init), 256)
    .end_cell()
    .begin_parse();
}


() deploy_nft_item(int item_index, cell nft_item_code, int amount) impure {
    cell state_init = calculate_nft_item_state_init(item_index, nft_item_code);
    slice nft_address = calculate_nft_item_address(workchain(), state_init);
    var (len, value) = encode_number_to_text(item_index);
    var msg = begin_cell()
    .store_uint(0x18, 6)
    .store_slice(nft_address)
    .store_coins(amount)
    .store_uint(4 + 2 + 1, 1 + 4 + 4 + 64 + 32 + 1 + 1 + 1)
    .store_ref(state_init)
    .store_ref(
        begin_cell()
        .store_slice(my_address())
        .store_ref(
            begin_cell()
            .store_uint(value, len * 8)
            .end_cell())
        .end_cell()
    );
    send_raw_message(msg.end_cell(), 1); ;; pay transfer fees separately, revert on errors

}


() check_proof_for_trnasfer(int root, int nullifier, int newCommitment, int new_root, int old_root, int last_index, slice transfer_proof) impure inline {

    slice alf1 =  begin_cell().store_uint(182000286537471, 48).store_uint(188678401565571, 48).store_uint(187245209450396, 48).store_uint(127518005434324, 48).store_uint(144397100865470, 48).store_uint(258741821310885, 48).store_uint(125665759774218, 48).store_uint(36382829990144, 48).end_cell().begin_parse();
    slice IC0 =  begin_cell().store_uint(181399083615333, 48).store_uint(50112315366325, 48).store_uint(224385869384977, 48).store_uint(134190696584964, 48).store_uint(260083344047989, 48).store_uint(92101634869926, 48).store_uint(6320068486148, 48).store_uint(183214668954775, 48).end_cell().begin_parse();
    slice IC1 =  begin_cell().store_uint(163766515616205, 48).store_uint(180861085788303, 48).store_uint(278256027495576, 48).store_uint(211415127713131, 48).store_uint(50356117398106, 48).store_uint(59428762593838, 48).store_uint(147071272658589, 48).store_uint(88310004946323, 48).end_cell().begin_parse();
    slice IC2 =  begin_cell().store_uint(142422763998458, 48).store_uint(272231674431391, 48).store_uint(54275979515837, 48).store_uint(171853027232129, 48).store_uint(213109968259144, 48).store_uint(17574867793163, 48).store_uint(254488792619659, 48).store_uint(119994619930637, 48).end_cell().begin_parse();
    slice IC3 =  begin_cell().store_uint(201555202714904, 48).store_uint(70702637559428, 48).store_uint(236674118519108, 48).store_uint(54871270723326, 48).store_uint(258073746810917, 48).store_uint(146259355453945, 48).store_uint(263707205339902, 48).store_uint(220225374440173, 48).end_cell().begin_parse();
    slice IC4 =  begin_cell().store_uint(151253434166027, 48).store_uint(125931578233522, 48).store_uint(58140814326684, 48).store_uint(19658520813, 48).store_uint(26162539706461, 48).store_uint(118493348355010, 48).store_uint(260522095640380, 48).store_uint(188275443943346, 48).end_cell().begin_parse();
    slice IC5 =  begin_cell().store_uint(189967634566988, 48).store_uint(145477532532808, 48).store_uint(5289736691904, 48).store_uint(178067809888540, 48).store_uint(185282102971299, 48).store_uint(275769416287670, 48).store_uint(143897843231225, 48).store_uint(155135460370100, 48).end_cell().begin_parse();
    slice IC6 =  begin_cell().store_uint(162892888133904, 48).store_uint(204034081648776, 48).store_uint(271476148458169, 48).store_uint(75980563529534, 48).store_uint(271666822557555, 48).store_uint(161509172770230, 48).store_uint(211679334400713, 48).store_uint(49052871943036, 48).end_cell().begin_parse();
    slice beta2 =  begin_cell().store_uint(45268298785829999156800790826, 96).store_uint(49616257531946340397706624184, 96).store_uint(21860288103068343353898458482, 96).store_uint(44130212597109342573800170705, 96).store_uint(4047260717587677040649332350, 96).store_uint(38438004468883114874440114862, 96).store_uint(37382830912273952379501564462, 96).store_uint(68660724947650442889836600213, 96).end_cell().begin_parse();
    slice gamma2 =  begin_cell().store_uint(45765300665918301128790692768, 96).store_uint(42137484379184671317244818970, 96).store_uint(56280794141317933024253112594, 96).store_uint(6059577009407902906031811454, 96).store_uint(709198854518927808499549479, 96).store_uint(14165060894806320894179293954, 96).store_uint(55805278558791767872231965478, 96).store_uint(52000413785700509085167893944, 96).end_cell().begin_parse();
    slice delta2 =  begin_cell().store_uint(45663853332457050739460156800, 96).store_uint(34709041207159386355522945009, 96).store_uint(18170931445389694099260254562, 96).store_uint(15412685160610612856692818338, 96).store_uint(935116660795894917453505349, 96).store_uint(36604057184097139513050393732, 96).store_uint(54452572225036866174564413387, 96).store_uint(36151973719712683302889505499, 96).end_cell().begin_parse();
    cell A_cell = transfer_proof~load_ref();
    cell B_cell = transfer_proof~load_ref();
    cell C_cell = transfer_proof~load_ref();
    slice A = A_cell.begin_parse();
    slice B = B_cell.begin_parse();
    slice C = C_cell.begin_parse();
    slice vk_x = IC0;


    vk_x = bls_g1_add(vk_x, bls_g1_mul(IC1, nullifier));
    vk_x = bls_g1_add(vk_x, bls_g1_mul(IC2, newCommitment));
    vk_x = bls_g1_add(vk_x, bls_g1_mul(IC3, root));
    vk_x = bls_g1_add(vk_x, bls_g1_mul(IC4, old_root));
    vk_x = bls_g1_add(vk_x, bls_g1_mul(IC5, new_root));
    vk_x = bls_g1_add(vk_x, bls_g1_mul(IC6, last_index));

    slice neg_a = bls_g1_negate(A);
    int success = bls_pairing_check(neg_a,
        B,
        alf1,
        beta2,
        vk_x,
        gamma2,
        C,
        delta2,
        4);
    ifnot (success) {
        throw(error::verify_failed);
    }
}

(int) check_proof_for_insert(int old_root, int new_root, int commitment, int pathIndices, slice insert_proof) impure inline {


    slice alf1 =  begin_cell().store_uint(182000286537471, 48).store_uint(188678401565571, 48).store_uint(187245209450396, 48).store_uint(127518005434324, 48).store_uint(144397100865470, 48).store_uint(258741821310885, 48).store_uint(125665759774218, 48).store_uint(36382829990144, 48).end_cell().begin_parse();
    slice IC0 =  begin_cell().store_uint(149463881306625, 48).store_uint(144872300902732, 48).store_uint(174187054867017, 48).store_uint(116683277427982, 48).store_uint(265686967952922, 48).store_uint(252921879845267, 48).store_uint(114778485693866, 48).store_uint(5303972209837, 48).end_cell().begin_parse();
    slice IC1 =  begin_cell().store_uint(163889391969450, 48).store_uint(246380033874386, 48).store_uint(73095240576401, 48).store_uint(93872595764167, 48).store_uint(209061551175750, 48).store_uint(145133340025488, 48).store_uint(118965754737971, 48).store_uint(114963008012871, 48).end_cell().begin_parse();
    slice IC2 =  begin_cell().store_uint(154611330325417, 48).store_uint(56883882533380, 48).store_uint(256864073646890, 48).store_uint(110223718526805, 48).store_uint(41488761585151, 48).store_uint(66949550052602, 48).store_uint(59725992543201, 48).store_uint(60822399158111, 48).end_cell().begin_parse();
    slice IC3 =  begin_cell().store_uint(204323902231497, 48).store_uint(146515902261225, 48).store_uint(223686418609716, 48).store_uint(63159927913005, 48).store_uint(266511227424255, 48).store_uint(139647823215357, 48).store_uint(243275058806357, 48).store_uint(113688717611142, 48).end_cell().begin_parse();
    slice IC4 =  begin_cell().store_uint(183046732570304, 48).store_uint(73751093200306, 48).store_uint(222619922391300, 48).store_uint(264954189415027, 48).store_uint(63818347814842, 48).store_uint(185189879229344, 48).store_uint(215937361595168, 48).store_uint(212335368650295, 48).end_cell().begin_parse();
    slice beta2 =  begin_cell().store_uint(45268298785829999156800790826, 96).store_uint(49616257531946340397706624184, 96).store_uint(21860288103068343353898458482, 96).store_uint(44130212597109342573800170705, 96).store_uint(4047260717587677040649332350, 96).store_uint(38438004468883114874440114862, 96).store_uint(37382830912273952379501564462, 96).store_uint(68660724947650442889836600213, 96).end_cell().begin_parse();
    slice gamma2 =  begin_cell().store_uint(45765300665918301128790692768, 96).store_uint(42137484379184671317244818970, 96).store_uint(56280794141317933024253112594, 96).store_uint(6059577009407902906031811454, 96).store_uint(709198854518927808499549479, 96).store_uint(14165060894806320894179293954, 96).store_uint(55805278558791767872231965478, 96).store_uint(52000413785700509085167893944, 96).end_cell().begin_parse();
    slice delta2 =  begin_cell().store_uint(57404885677640579730243374799, 96).store_uint(74640312393593044018703206431, 96).store_uint(72169551985828096175287641873, 96).store_uint(73191377323043092450051400364, 96).store_uint(2166075833178725585951546652, 96).store_uint(27864811610718394234613231021, 96).store_uint(5303551526686084678103393224, 96).store_uint(16202961803211306031003898654, 96).end_cell().begin_parse();

    cell A_cell = insert_proof~load_ref();
    cell B_cell = insert_proof~load_ref();
    cell C_cell = insert_proof~load_ref();
    slice A = A_cell.begin_parse();
    slice B = B_cell.begin_parse();
    slice C = C_cell.begin_parse();
    slice vk_x = IC0;

    vk_x = bls_g1_add(vk_x, bls_g1_mul(IC1, old_root));
    vk_x = bls_g1_add(vk_x, bls_g1_mul(IC2, new_root));
    vk_x = bls_g1_add(vk_x, bls_g1_mul(IC3, commitment));
    vk_x = bls_g1_add(vk_x, bls_g1_mul(IC4, pathIndices));
    slice neg_a = bls_g1_negate(A);

    int success = bls_pairing_check(neg_a,
        B,
        alf1,
        beta2,
        vk_x,
        gamma2,
        C,
        delta2,
        4);
    ifnot (success) {
        return 0;
    }
    return 1;

}


() check_proof_for_reveal(int root, int nullifier, int id, slice owner, slice reveal_proof) impure {




    slice alf1 =  begin_cell().store_uint(182000286537471, 48).store_uint(188678401565571, 48).store_uint(187245209450396, 48).store_uint(127518005434324, 48).store_uint(144397100865470, 48).store_uint(258741821310885, 48).store_uint(125665759774218, 48).store_uint(36382829990144, 48).end_cell().begin_parse();
    slice IC0 =  begin_cell().store_uint(187969466244849, 48).store_uint(590557250672, 48).store_uint(39208872247787, 48).store_uint(78962224450154, 48).store_uint(202336908340556, 48).store_uint(66362047572734, 48).store_uint(225475315600036, 48).store_uint(31898855084953, 48).end_cell().begin_parse();
    slice IC1 =  begin_cell().store_uint(201016416938893, 48).store_uint(65053379958719, 48).store_uint(141693688165426, 48).store_uint(218196366863382, 48).store_uint(67061901156563, 48).store_uint(181360444758220, 48).store_uint(182046842475223, 48).store_uint(219149308820320, 48).end_cell().begin_parse();
    slice IC2 =  begin_cell().store_uint(176536719830018, 48).store_uint(204879410085458, 48).store_uint(177989422570515, 48).store_uint(118824027482880, 48).store_uint(70419102956150, 48).store_uint(108526428195383, 48).store_uint(75445846435030, 48).store_uint(195804694793841, 48).end_cell().begin_parse();
    slice IC3 =  begin_cell().store_uint(200282658979715, 48).store_uint(127759796506555, 48).store_uint(21235625263221, 48).store_uint(233329549922934, 48).store_uint(237549757711258, 48).store_uint(265838101916218, 48).store_uint(101407339417847, 48).store_uint(146035733503026, 48).end_cell().begin_parse();
    slice IC4 =  begin_cell().store_uint(199251840884641, 48).store_uint(30300527701365, 48).store_uint(179993500369084, 48).store_uint(122975640743974, 48).store_uint(120882769536253, 48).store_uint(230765205089862, 48).store_uint(224947834108455, 48).store_uint(274562610764549, 48).end_cell().begin_parse();
    slice beta2 =  begin_cell().store_uint(45268298785829999156800790826, 96).store_uint(49616257531946340397706624184, 96).store_uint(21860288103068343353898458482, 96).store_uint(44130212597109342573800170705, 96).store_uint(4047260717587677040649332350, 96).store_uint(38438004468883114874440114862, 96).store_uint(37382830912273952379501564462, 96).store_uint(68660724947650442889836600213, 96).end_cell().begin_parse();
    slice gamma2 =  begin_cell().store_uint(45765300665918301128790692768, 96).store_uint(42137484379184671317244818970, 96).store_uint(56280794141317933024253112594, 96).store_uint(6059577009407902906031811454, 96).store_uint(709198854518927808499549479, 96).store_uint(14165060894806320894179293954, 96).store_uint(55805278558791767872231965478, 96).store_uint(52000413785700509085167893944, 96).end_cell().begin_parse();
    slice delta2 =  begin_cell().store_uint(56546239611201385334961034965, 96).store_uint(11810872591319394489668578744, 96).store_uint(24093856370803646076256036104, 96).store_uint(64690410479692011137225180539, 96).store_uint(72529469777297474349473631, 96).store_uint(49682332598251726234849991718, 96).store_uint(16470468383032807588932147782, 96).store_uint(22277130497483961919496827347, 96).end_cell().begin_parse();

    cell A_cell = reveal_proof~load_ref();
    cell B_cell = reveal_proof~load_ref();
    cell C_cell = reveal_proof~load_ref();
    slice A = A_cell.begin_parse();
    slice B = B_cell.begin_parse();
    slice C = C_cell.begin_parse();
    slice vk_x = IC0;


    vk_x = bls_g1_add(vk_x, bls_g1_mul(IC1, nullifier));
    vk_x = bls_g1_add(vk_x, bls_g1_mul(IC2, id));
    vk_x = bls_g1_add(vk_x, bls_g1_mul(IC3, owner.preload_uint(256)));
    vk_x = bls_g1_add(vk_x, bls_g1_mul(IC4, root));



    slice neg_a = bls_g1_negate(A);
    int success = bls_pairing_check(neg_a,
        B,
        alf1,
        beta2,
        vk_x,
        gamma2,
        C,
        delta2,
        4);
    ifnot (success) {
        throw(error::verify_failed);
    }
}

() send_royalty_params(slice to_address, int query_id, slice data) impure inline {
    var msg = begin_cell()
    .store_uint(0x10, 6) ;; nobounce - int_msg_info$0 ihr_disabled:Bool bounce:Bool bounced:Bool src:MsgAddress -> 011000
    .store_slice(to_address)
    .store_coins(0)
    .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
    .store_uint(op::report_royalty_params(), 32)
    .store_uint(query_id, 64)
    .store_slice(data);
    send_raw_message(msg.end_cell(), 64); ;; carry all the remaining value of the inbound message
}

(int) price_for_nft_item(int level, cell discounts, slice sender) impure inline {
    ;;(333 + 66 * level)
    (_, int f) = discounts.udict_get?(256, slice_hash(sender));
    if (f == 0) {
        return (333 + 66 * level) * ONE_TON;
    }
    ;; 11% discount
    return (333 + 66 * level) * ONE_TON * 89 / 100;

}

(cell) pack_zk_info(int relayer_reward, cell jetton_info, cell merkle, cell nullifiers, cell discounts, int mint_state, cell stucks) impure inline {
    return begin_cell()
    .store_ref(jetton_info)
    .store_ref(merkle)
    .store_dict(nullifiers)
    .store_ref(
        begin_cell()
        .store_uint(mint_state, 8)
        .store_coins(relayer_reward)
        .store_dict(discounts)
        .store_dict(stucks)
        .end_cell()
    ).end_cell();
}

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) {
        ;; ignore empty messages
        return ();
    }
    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);

    if (flags & 1) {
        ;; ignore all bounced messages
        return ();
    }
    slice sender_address = cs~load_msg_addr();
    int op = in_msg_body~load_uint(32);
    int query_id = in_msg_body~load_uint(64);


    var (owner_address, next_item_index, content, nft_item_code, royalty_params, zk_info) = load_data();

    if (op == op::get_royalty_params()) {
        send_royalty_params(sender_address, query_id, royalty_params.begin_parse());
        return ();
    }

    slice zk_info_slice = zk_info.begin_parse();
    cell jetton_info = zk_info_slice~load_ref();

    cell merkle = zk_info_slice~load_ref();
    cell nullifiers = zk_info_slice~load_dict();
    cell sale_info = zk_info_slice~load_ref();
    slice sale_info_slice = sale_info.begin_parse();
    int mint_state = sale_info_slice~load_uint(8);
    int relayer_reward = sale_info_slice~load_coins();
    cell discounts = sale_info_slice~load_dict();
    cell stucks = sale_info_slice~load_dict();



    slice jetton_info_slice = jetton_info.begin_parse();
    slice jetton_master_address = jetton_info_slice~load_msg_addr();
    cell JETTON_BYTECODE = jetton_info_slice~load_ref();
    if (op == op::transfer_notification()) {
        ;; should check if jetton is valid

        int send_amount = in_msg_body~load_coins(); ;; Jettons send

        throw_unless(error::access_denied, equal_slices(sender_address, calculate_user_jetton_wallet_address(my_address(), jetton_master_address, JETTON_BYTECODE)));

        slice origin_sender = in_msg_body~load_msg_addr(); ;; transfer origin address
        int nft_price = price_for_nft_item(next_item_index, discounts, origin_sender);
        if ((send_amount < nft_price)
        | (next_item_index == 34)) {
            send_jetton(origin_sender, send_amount, jetton_master_address, JETTON_BYTECODE);
            return ();
        }

        int need_to_fwd = send_amount - nft_price;
        if (need_to_fwd > 0) {
            send_jetton(origin_sender, need_to_fwd, jetton_master_address, JETTON_BYTECODE);
        }

        send_jetton(BURN_ADDRESS, nft_price, jetton_master_address, JETTON_BYTECODE);



        emit_log_simple(0, begin_cell().store_uint(0 ,4).store_uint(next_item_index, 32).store_slice(origin_sender).store_coins(nft_price).end_cell().begin_parse());

        next_item_index += 1;

        save_data(owner_address, next_item_index, content, nft_item_code, royalty_params
            , pack_zk_info(relayer_reward, jetton_info, merkle, nullifiers, discounts, mint_state, stucks));

        return ();
    }

    if (op == op::private_transfer) {
        ;; transfer private nft ( by relayers with proof from real owner)

        cell transfer_info = in_msg_body~load_ref();
        slice transfer_info_slice = transfer_info.begin_parse();
        int root = transfer_info_slice~load_uint(256);
        int nullifier = transfer_info_slice~load_uint(256);
        int newCommitment = transfer_info_slice~load_uint(256);
        cell rest_of_args = transfer_info_slice~load_ref();
        slice rest_of_args_slice = rest_of_args.begin_parse();
        int new_root = rest_of_args_slice~load_uint(256);

        (int old_root, int last_index) = get_last_root_handler(zk_info);



        throw_unless(error::verify_failed_double_spend, is_unknown_nullifier(nullifier, nullifiers));
        throw_unless(error::verify_failed_input, root < FIELD_SIZE);
        throw_unless(error::verify_failed_input, nullifier < FIELD_SIZE);
        throw_unless(error::verify_failed_input, newCommitment < FIELD_SIZE);
        throw_unless(error::verify_failed_input, new_root < FIELD_SIZE);
        throw_unless(error::verify_failed_root, is_known_root(root));
        cell transfer_proof = transfer_info_slice~load_ref();
        slice transfer_proof_slice = transfer_proof.begin_parse();
        check_proof_for_trnasfer(root, nullifier, newCommitment, new_root, old_root, last_index, transfer_proof_slice);

        (int index, merkle) = insert(new_root, merkle);

        emit_log_simple(op::private_transfer, begin_cell().store_uint(1, 4).store_uint(newCommitment, 256).store_uint(index, 32).store_uint(nullifier, 256).end_cell().begin_parse());

        nullifiers~udict_set(256, nullifier, begin_cell().end_cell().begin_parse());
        mint_tonnel(sender_address, relayer_reward, jetton_master_address);
        save_data(owner_address, next_item_index, content, nft_item_code, royalty_params,
            pack_zk_info( relayer_reward, jetton_info, merkle, nullifiers, discounts, mint_state, stucks));

        return ();
    }

    if (op == op::reveal) {
        ;; reveal owner_ship ( by users with proof from real owner)

        ;; owner nullifier root id should be load
        cell transfer_info = in_msg_body~load_ref();
        slice transfer_info_slice = transfer_info.begin_parse();
        int root = transfer_info_slice~load_uint(256);
        int nullifier = transfer_info_slice~load_uint(256);
        slice owner = transfer_info_slice~load_msg_addr();
        int id = transfer_info_slice~load_uint(32);



        throw_unless(error::verify_failed_input, root < FIELD_SIZE);
        throw_unless(error::verify_failed_input, nullifier < FIELD_SIZE);
        throw_unless(error::verify_failed_double_spend, is_unknown_nullifier(nullifier, nullifiers));
        throw_unless(error::verify_failed_root, is_known_root(root));
        cell reveal_proof = transfer_info_slice~load_ref();
        slice reveal_proof_slice = reveal_proof.begin_parse();

        check_proof_for_reveal(root, nullifier, id, owner, reveal_proof_slice);
        cell state_init = calculate_nft_item_state_init(id, nft_item_code);
        slice nft_address = calculate_nft_item_address(workchain(), state_init);


        nullifiers~udict_set(256, nullifier, begin_cell().end_cell().begin_parse());

        ;; transfer nft item to given owner
        transfer_nft_item(nft_address, owner);

        emit_log_simple(op::reveal, begin_cell().store_uint(2, 4).store_uint(id, 32).store_slice(owner).store_uint(nullifier, 256).end_cell().begin_parse());

        save_data(owner_address,
            next_item_index,
            content,
            nft_item_code,
            royalty_params,
            pack_zk_info( relayer_reward, jetton_info, merkle, nullifiers, discounts, mint_state, stucks)
        );

        return ();
    }

    if (op == op::ownership_assigned()) {
        ;; hide owner_ship (by owner sent from nft item)
        slice sender_origin = in_msg_body~load_msg_addr();
        cell commitment_msg = in_msg_body~load_ref();
        slice commitment_msg_slice = commitment_msg.begin_parse();
        int commitment_value = commitment_msg_slice~load_uint(256);
        int id = commitment_msg_slice~load_uint(32);

        cell state_init = calculate_nft_item_state_init(id, nft_item_code);
        slice nft_address = calculate_nft_item_address(workchain(), state_init);
        throw_unless(error::access_denied, equal_slices(sender_address, nft_address));
        int new_root = commitment_msg_slice~load_uint(256);
        int given_old_root = commitment_msg_slice~load_uint(256);
        cell insert_proof = commitment_msg_slice~load_ref();
        slice insert_proof_slice = insert_proof.begin_parse();
        (int old_root, int last_index) = get_last_root_handler(zk_info);

        throw_unless(error::verify_failed_input, commitment_value < FIELD_SIZE);
        throw_unless(error::verify_failed_input, new_root < FIELD_SIZE);
        int check = 0;
        if (given_old_root == old_root){
            check = check_proof_for_insert(old_root, new_root, commitment_value, last_index, insert_proof_slice);
        }


        if (check == 0) {
            stucks~udict_set(256, commitment_value, begin_cell().store_uint(commitment_value, 256).store_uint(id, 32).end_cell().begin_parse());
        } else {
            (int index, merkle) = insert(new_root, merkle);
            emit_log_simple(op::hide, begin_cell().store_uint(3, 4).store_uint(commitment_value, 256).store_uint(index, 32).store_uint(id, 32).end_cell().begin_parse());
        }


        save_data(
            owner_address,
            next_item_index,
            content,
            nft_item_code,
            royalty_params,
            pack_zk_info( relayer_reward, jetton_info, merkle, nullifiers, discounts, mint_state, stucks)
        );

        return ();

    }


    if (op == op::remove_stuck_min) {
        (stucks, _, slice val, int flag) = stucks.udict_delete_get_min(256);
        throw_unless(error::empty_stuck, flag);

        int commitment_value_stuck = val~load_uint(256);
        int token_id = val~load_uint(32);

        cell commitment = in_msg_body~load_ref();
        slice commitment_slice = commitment.begin_parse();
        int commitment_value = commitment_slice~load_uint(256);
        int new_root = commitment_slice~load_uint(256);
        int given_old_root = commitment_slice~load_uint(256);
        cell insert_proof = commitment_slice~load_ref();
        slice insert_proof_slice = insert_proof.begin_parse();

        (int old_root, int last_index) = get_last_root_handler(zk_info);

        throw_unless(error::verify_failed_input, commitment_value_stuck == commitment_value);
        throw_unless(error::verify_failed_input, commitment_value < FIELD_SIZE);
        throw_unless(error::verify_failed_input, new_root < FIELD_SIZE);
        int check = 0;
        if (given_old_root == old_root){
            check = check_proof_for_insert(old_root, new_root, commitment_value, last_index, insert_proof_slice);
        }

        throw_unless(error::verify_failed_input, check == 1);
        (int index, merkle) = insert(new_root,  merkle);

        emit_log_simple(op::hide, begin_cell().store_uint(3, 4).store_uint(commitment_value, 256).store_uint(index, 32).store_uint(token_id, 32).end_cell().begin_parse());

        save_data(
            owner_address,
            next_item_index,
            content,
            nft_item_code,
            royalty_params,
            pack_zk_info( relayer_reward, jetton_info, merkle, nullifiers, discounts, mint_state, stucks)
        );
        send_ton(sender_address, 0, SEND_MODE_CARRY_ALL_REMAINING_MESSAGE_VALUE);

        return ();


    }

    throw_unless(401, equal_slices(sender_address, owner_address));


    if (op == 3) {
        ;; change owner
        slice new_owner = in_msg_body~load_msg_addr();
        save_data(new_owner, next_item_index, content, nft_item_code, royalty_params, zk_info);
        return ();
    }
    if ((op == 4) & (mint_state < 33)) {

        int amount_to_fwd = in_msg_body~load_coins();
        cell commitment = in_msg_body~load_ref();
        slice commitment_slice = commitment.begin_parse();
        int commitment_value = commitment_slice~load_uint(256);
        int id = commitment_slice~load_uint(32); ;; id of nft item from 1 to 33
        int new_root = commitment_slice~load_uint(256);
        cell insert_proof = commitment_slice~load_ref();
        slice insert_proof_slice = insert_proof.begin_parse();

        (int old_root, int last_index) = get_last_root_handler(zk_info);

        throw_unless(error::verify_failed_input, commitment_value < FIELD_SIZE);
        throw_unless(error::verify_failed_input, new_root < FIELD_SIZE);

        int check = check_proof_for_insert(old_root, new_root, commitment_value, last_index, insert_proof_slice);
        throw_unless(error::verify_failed_input, check == 1);

        (int index, merkle) = insert(new_root, merkle);

        deploy_nft_item(id, nft_item_code, amount_to_fwd);
        mint_state += 1;
        emit_log_simple(op::mint(), begin_cell().store_uint(4, 4).store_uint(commitment_value, 256).store_uint(index, 32).store_uint(id, 32).end_cell().begin_parse());

        save_data(
            owner_address,
            next_item_index,
            content,
            nft_item_code,
            royalty_params,
            pack_zk_info( relayer_reward, jetton_info, merkle, nullifiers, discounts, mint_state, stucks)
        );
        return ();
    }
    if (op == 5){
        send_ton(sender_address, my_balance - 5 * ONE_TON, SEND_MODE_CARRY_ALL_REMAINING_MESSAGE_VALUE);
        return ();
    }
    if (op == 6){
        int amount = in_msg_body~load_coins();
        send_jetton(sender_address, amount, jetton_master_address, JETTON_BYTECODE);
        return ();
    }
    if (op == 7){
        int amount = in_msg_body~load_coins();
        save_data(
            owner_address,
            next_item_index,
            content,
            nft_item_code,
            royalty_params,
            pack_zk_info( amount, jetton_info, merkle, nullifiers, discounts, mint_state, stucks)
        );
        return ();
    }


    throw(0xffff);
}

;; Get methods

(int, cell, slice) get_collection_data() method_id {
    var (owner_address, next_item_index, content, _, _, _) = load_data();
    slice cs = content.begin_parse();
    return (next_item_index, cs~load_ref(), owner_address);
}

slice get_nft_address_by_index(int index) method_id {
    var (_, _, _, nft_item_code, _, _) = load_data();
    cell state_init = calculate_nft_item_state_init(index, nft_item_code);
    return calculate_nft_item_address(workchain(), state_init);
}

(int, int, slice) royalty_params() method_id {
    var (_, _, _, _, royalty, _) = load_data();
    slice rs = royalty.begin_parse();
    return (rs~load_uint(16), rs~load_uint(16), rs~load_msg_addr());
}

cell get_nft_content(int index, cell individual_nft_content) method_id {
    var (_, _, content, _, _, _) = load_data();
    slice cs = content.begin_parse();
    cs~load_ref();
    slice common_content = cs~load_ref().begin_parse();
    return (begin_cell()
    .store_uint(1, 8) ;; offchain tag
    .store_slice(common_content)
        .store_ref(individual_nft_content)
    .end_cell());
}
