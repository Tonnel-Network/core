#include "storageZKNFT.fc";

const FIELD_SIZE = 52435875175126190479447740508185965837690552500527637822603658699938581184513;
const ZERO_VALUE = 21663839004416932945382355908790599225266501822907911457504978515578255421292;
const POOL_SIZE = 5 * 1000000000; ;; 5 TON for TESTNET



const op::change_fee_address = 0x1c69253d;
const op::change_fee_coef = 0x44f37bdf;
const op::private_transfer = 0x777;
const op::reveal = 0x888;
const op::hide = 0x999;
const op::remove_stuck_min = 0x111;

;; errors
const error::unknown_op = 101;
const error::access_denied = 102;
const error::fund = 103;
const error::verify_failed = 104;
const error::verify_failed_fee = 105;
const error::verify_failed_root = 106;
const error::verify_failed_double_spend = 107;
const error::verify_failed_input = 108;
const error::invalid_id = 109;
const error::finished = 110;
const error::empty_stuck = 111;

;; other
const const::tx_fee_send_nft = 40000000; ;; 0.04 TON

const SEND_MODE_CARRY_ALL_REMAINING_MESSAGE_VALUE = 64;




(int, cell) insert(int root, cell merkle_data_cell) impure {
    slice merkle_data = merkle_data_cell.begin_parse();
    int currentRootIndex = merkle_data~load_uint(8);
    int nextIndex = merkle_data~load_uint(32);
    cell roots = merkle_data~load_dict();

    currentRootIndex = (currentRootIndex + 1) % 100;
    roots~udict_set(8, currentRootIndex, begin_cell().store_uint(root, 256).end_cell().begin_parse());
    nextIndex = nextIndex + 1;
    return (nextIndex - 1, begin_cell().store_uint(currentRootIndex, 8).store_uint(nextIndex, 32).store_dict(roots).end_cell());
}





(int) is_known_root(int root) impure {
    if (root == 0){
        return 0;
    }
    (_, _, _, _, _, cell zk_info) = load_data();
    slice zk_info_slice = zk_info.begin_parse();
    zk_info_slice~load_ref();
    cell merkle_cell = zk_info_slice~load_ref();

    slice merkle = merkle_cell.begin_parse();
    int currentRootIndex = merkle~load_uint(8);
    merkle~load_uint(32);
    cell roots = merkle~load_dict();

    int i = currentRootIndex;

    do {

        (slice root_slice, int found) = roots.udict_get?(8, i);

        if(found == 0){
            return 0;
        }
        if(root_slice~load_uint(256) == root){
            return 1;
        }

        if( i == 0 ){
            i = 100;
        }
        i -= 1;
    } until (i == currentRootIndex);
    return 0;

}


(int) is_unknown_nullifier(int nullifier_hash, cell nullifiers) impure {
    (_, int found) = nullifiers.udict_get?(256, nullifier_hash);
    if(found == 0){
        return 1;
    }
    return 0;
}

(int, int) get_last_root_handler(cell zk_info) impure {
    slice zk_info_slice = zk_info.begin_parse();
    zk_info_slice~load_ref();
    cell merkle_cell = zk_info_slice~load_ref();
    slice merkle = merkle_cell.begin_parse();
    int currentRootIndex = merkle~load_uint(8);
    int last_index = merkle~load_uint(32);
    cell roots = merkle~load_dict();
    (slice root_slice, int found) = roots.udict_get?(8, currentRootIndex);
    if(found == 0){
        return (0, last_index);
    }
    return (root_slice~load_uint(256), last_index);
}

(int) get_last_root() method_id {
    (_, _, _, _, _, cell zk_info) = load_data();
    (int last_root, _) = get_last_root_handler(zk_info);
    return last_root;
}

(int) get_root_known(int root) method_id {
    return is_known_root(root);
}

(int) get_min_stuck() method_id {
    (_, _, _, _, _, cell zk_info) = load_data();
    slice zk_info_slice = zk_info.begin_parse();
    zk_info_slice~load_ref();
    zk_info_slice~load_ref();
    zk_info_slice~load_dict();
    cell sale_info = zk_info_slice~load_ref();
    slice sale_info_slice = sale_info.begin_parse();
    sale_info_slice~load_uint(8);
    sale_info_slice~load_coins();
    sale_info_slice~load_dict();
    cell stucks = sale_info_slice~load_dict();
    (int key, slice val, int flag) = stucks.udict_get_min?(256);
    if(flag == 0){
        return 0;
    }
    return val~load_uint(256);
}
