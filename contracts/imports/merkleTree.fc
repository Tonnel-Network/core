#include "storage.fc";

const FIELD_SIZE = 52435875175126190479447740508185965837690552500527637822603658699938581184513;
const ZERO_VALUE = 21663839004416932945382355908790599225266501822907911457504978515578255421292;
const POOL_SIZE = 5 * 1000000000; ;; 5 TON for Mainnet:)


const op::deposit = 0x888;
const op::withdraw = 0x777;
const op::change_config = 0x999;
const op::remove_stuck_min = 0x111;
const op::change_fee_address = 0x1c69253d;
const op::change_fee_coef = 0x44f37bdf;
const op::set_tonnel_tree = 0x666;

;; errors
const error::unknown_op = 101;
const error::access_denied = 102;
const error::fund = 103;
const error::verify_failed = 104;
const error::verify_failed_fee = 105;
const error::verify_failed_root = 106;
const error::verify_failed_double_spend = 107;
const error::verify_failed_input = 108;
const error::empty_stuck = 109;
;; other
const const::tx_fee = 170000000; ;; 0.17 TON


(int, cell) insert(int root, cell merkle_data_cell) impure {
    slice merkle_data = merkle_data_cell.begin_parse();
    int currentRootIndex = merkle_data~load_uint(8);
    int nextIndex = merkle_data~load_uint(32);
    cell roots = merkle_data~load_dict();

    currentRootIndex = (currentRootIndex + 1) % 100;
    roots~udict_set(8, currentRootIndex, begin_cell().store_uint(root, 256).end_cell().begin_parse());
    nextIndex = nextIndex + 1;
    return (nextIndex - 1, begin_cell().store_uint(currentRootIndex, 8).store_uint(nextIndex, 32).store_dict(roots).end_cell());
}




(int) is_known_root(int root) impure {
    if (root == 0){
        return 0;
    }

    (cell merkle_cell, _, _, _) = load_data();
    slice merkle = merkle_cell.begin_parse();
    int currentRootIndex = merkle~load_uint(8);
    merkle~load_uint(32);
    cell roots = merkle~load_dict();

    int i = currentRootIndex;

    do {

        (slice root_slice, int found) = roots.udict_get?(8, i);

        if(found == 0){
            return 0;
        }
        if(root_slice~load_uint(256) == root){
            return 1;
        }

        if( i == 0 ){
            i = 100;
        }
        i -= 1;
    } until (i == currentRootIndex);
    return 0;

}


(int) is_unknown_nullifier(int nullifier_hash, cell nullifiers) impure {
    (_, int found) = nullifiers.udict_get?(256, nullifier_hash);
    if(found == 0){
        return 1;
    }
    return 0;


}
(int, int) get_last_root_handler(cell merkle_cell) impure {
    slice merkle = merkle_cell.begin_parse();
    int currentRootIndex = merkle~load_uint(8);
    int last_index = merkle~load_uint(32);
    cell roots = merkle~load_dict();
    (slice root_slice, int found) = roots.udict_get?(8, currentRootIndex);
    if(found == 0){
        return (0, last_index);
    }
    return (root_slice~load_uint(256), last_index);
}

(int) get_last_root() method_id {
    (cell merkle_cell, _, _, _) = load_data();
    (int root, _) = get_last_root_handler(merkle_cell);
    return root;
}

(int) get_min_stuck() method_id {
    (_, _, _, cell stuck) = load_data();
    (int key, slice val, int flag) = stuck.udict_get_min?(256);
    if(flag == 0){
        return 0;
    }
    return val~load_uint(256);
}

(int) get_root_known(int root) method_id {
    return is_known_root(root);
}
